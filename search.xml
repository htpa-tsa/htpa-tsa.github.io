<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Aidan&#39;s Programming Tutorials</title>
      <link href="//blog/aidans-tutorials/"/>
      <url>//blog/aidans-tutorials/</url>
      
        <content type="html"><![CDATA[<div class="container"><div class="card-grid"><div class="card" style="">        <div class="cover-img"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/JavaScript-logo.png/800px-JavaScript-logo.png" alt="JavaScript"></div>        <div class="content">            <p class="title">JavaScript</p>            <p class="description">Aidan's Programming Tutorials</p>        </div>        <div class="actions">            <div class="left">                <span class="badge no-select yellow"><span title="JavaScript"><i class="fab fa-js"></i></span></span>            </div>            <div class="right">                <a href="javascript" class="action-button-primary">VIEW</a>            </div>            </div>        </div><div class="card" style="">        <div class="cover-img"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/1869px-Python-logo-notext.svg.png" alt="Python"></div>        <div class="content">            <p class="title">Python</p>            <p class="description">Aidan's Programming Tutorials</p>        </div>        <div class="actions">            <div class="left">                <span class="badge no-select blue"><span title="Python"><i class="fab fa-python"></i></span></span>            </div>            <div class="right">                <a href="python" class="action-button-primary">VIEW</a>            </div>            </div>        </div></div></div>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Student-Written Articles</title>
      <link href="//blog/article-submissions/"/>
      <url>//blog/article-submissions/</url>
      
        <content type="html"><![CDATA[<div class="container"><div class="card-grid"><div class="card" style="">        <div class="cover-img"><img src="/asset/blog/article-submissions/kyra-dan.gif" alt="Kyra, Dan"></div>        <div class="content">            <p class="title">Kyra, Dan</p>            <p class="description">Game Development</p>        </div>        <div class="actions">            <div class="left">                <span class="badge no-select grey"><span title="Game Design"><i class="fa-brands fa-unity"></i></span></span><span class="badge no-select blue"><span title="Article"><i class="fa-solid fa-newspaper"></i></span></span>            </div>            <div class="right">                <a href="kyra-dan" class="action-button-primary">VIEW</a>            </div>            </div>        </div><div class="card" style="">        <div class="cover-img"><img src="/asset/blog/article-submissions/adrian-aleesa.gif" alt="Adrian, Aleesa"></div>        <div class="content">            <p class="title">Adrian, Aleesa</p>            <p class="description">Competitive Programming</p>        </div>        <div class="actions">            <div class="left">                <span class="badge no-select yellow"><span title="Competitive Programming"><i class="fa-solid fa-code"></i></span></span><span class="badge no-select blue"><span title="Article"><i class="fa-solid fa-newspaper"></i></span></span>            </div>            <div class="right">                <a href="adrian-aleesa" class="action-button-primary">VIEW</a>            </div>            </div>        </div><div class="card" style="">        <div class="cover-img"><img src="/asset/blog/article-submissions/aidan-jonathan.gif" alt="Aidan, Jonathan"></div>        <div class="content">            <p class="title">Aidan, Jonathan</p>            <p class="description">Game Design Competition</p>        </div>        <div class="actions">            <div class="left">                <span class="badge no-select grey"><span title="Game Design"><i class="fa-brands fa-unity"></i></span></span><span class="badge no-select blue"><span title="Article"><i class="fa-solid fa-newspaper"></i></span></span>            </div>            <div class="right">                <a href="aidan-jonathan" class="action-button-primary">VIEW</a>            </div>            </div>        </div><div class="card" style="">        <div class="cover-img"><img src="/asset/blog/article-submissions/joon.gif" alt="Joon"></div>        <div class="content">            <p class="title">Joon</p>            <p class="description">Competitive Programming</p>        </div>        <div class="actions">            <div class="left">                <span class="badge no-select yellow"><span title="Competitive Programming"><i class="fa-solid fa-code"></i></span></span><span class="badge no-select yellow"><span title="Presentation"><i class="fa-solid fa-person-chalkboard"></i></span></span>            </div>            <div class="right">                <a href="/asset/blog/article-submissions/joon.pdf" class="action-button-primary">VIEW</a>            </div>            </div>        </div><div class="card" style="">        <div class="cover-img"><img src="/asset/blog/article-submissions/jason.gif" alt="Jason"></div>        <div class="content">            <p class="title">Jason</p>            <p class="description">WTF is a CTF?</p>        </div>        <div class="actions">            <div class="left">                <span class="badge no-select undefined"><span title="Cybersecurity"><i class="fa-solid fa-shield-halved"></i></span></span><span class="badge no-select blue"><span title="Article"><i class="fa-solid fa-newspaper"></i></span></span>            </div>            <div class="right">                <a href="https://enscribe.dev/blog/wtf-is-a-ctf/" class="action-button-primary">VIEW</a>            </div>            </div>        </div><div class="card" style="">        <div class="cover-img"><img src="/asset/blog/article-submissions/jude-brian.gif" alt="Jude, Brian"></div>        <div class="content">            <p class="title">Jude, Brian</p>            <p class="description">Game Development</p>        </div>        <div class="actions">            <div class="left">                <span class="badge no-select grey"><span title="Game Design"><i class="fa-brands fa-unity"></i></span></span><span class="badge no-select blue"><span title="Article"><i class="fa-solid fa-newspaper"></i></span></span>            </div>            <div class="right">                <a href="jude-brian" class="action-button-primary">VIEW</a>            </div>            </div>        </div><div class="card" style="">        <div class="cover-img"><img src="/asset/blog/article-submissions/samantha-xochitl.gif" alt="Samantha, Xochitl"></div>        <div class="content">            <p class="title">Samantha, Xochitl</p>            <p class="description">Cybersecurity</p>        </div>        <div class="actions">            <div class="left">                <span class="badge no-select undefined"><span title="Cybersecurity"><i class="fa-solid fa-shield-halved"></i></span></span><span class="badge no-select blue"><span title="Article"><i class="fa-solid fa-newspaper"></i></span></span>            </div>            <div class="right">                <a href="samantha-xochitl" class="action-button-primary">VIEW</a>            </div>            </div>        </div></div></div><figcaption><a href="https://storyset.com/work">Work illustrations by Storyset</a></figcaption>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 101.3: Command Cheatsheet</title>
      <link href="//blog/linux-101/03/"/>
      <url>//blog/linux-101/03/</url>
      
        <content type="html"><![CDATA[<p><strong>Always remember</strong>: If you have no idea how to use a command type either:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man <span class="built_in">command</span></span><br><span class="line"><span class="built_in">command</span> --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>Also note that when pasting commands, you should be using <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>V</kbd> instead of just <kbd>Ctrl</kbd> + <kbd>V</kbd>.</p><h3 id="Essential-Commands"><a href="#Essential-Commands" class="headerlink" title="Essential Commands"></a>Essential Commands</h3><p>Here are the most common and important commands that you should memorize if you want to use terminal and access the shell:</p><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>When used alone, this command will repeat your argument. </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ <span class="built_in">echo</span> <span class="string">&quot;Hello&quot;</span></span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><p>You can also <code>echo</code> variables:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ <span class="built_in">echo</span> <span class="variable">$USER</span></span><br><span class="line">user</span><br></pre></td></tr></table></figure><p>You can also <code>echo</code> “into” files with the <code>&gt;</code> (redirect) operator, which will write your string into the file argued after the operator. Here, we’ll create a file called <code>hello.txt</code>, write “Hello” into it, and then print the contents of the file with <code>cat</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ <span class="built_in">echo</span> <span class="string">&quot;Hello&quot;</span> &gt; hello.txt</span><br><span class="line">user@host:~$ <span class="built_in">cat</span> hello.txt</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><p><strong>Important</strong>: Mind that <code>&gt;</code> and <code>&gt;&gt;</code> are two different terminal operators. Using only <code>&gt;</code> can remove all code&#x2F;text from a file and replace it with your string. On the other hand, using <code>&gt;&gt;</code> appends your string to the end of the file.</p><hr><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p><code>ls</code> lists the files within the current directory. To make ls more useful, refer to the <code>man</code> page and add the necessary flags. We’ll use <code>-al</code> (a combination of <code>--all</code> and <code>-l</code>) to display all files (including hidden ones) and list them in a long format:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:/$ <span class="built_in">ls</span> -al</span><br><span class="line">total 620</span><br><span class="line">drwxr-xr-x  1 root root    512 Sep 24 22:39 .</span><br><span class="line">drwxr-xr-x  1 root root    512 Sep 24 22:39 ..</span><br><span class="line">lrwxrwxrwx  1 root root      7 Aug  9 23:56 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x  1 root root    512 Aug 10 00:02 boot</span><br><span class="line">drwxr-xr-x  1 root root    512 Sep 25 11:34 dev</span><br><span class="line">drwxr-xr-x  1 root root    512 Sep 25 10:57 etc</span><br><span class="line">drwxr-xr-x  1 root root    512 Sep 24 22:39 home</span><br><span class="line">-rwxr-xr-x  1 root root 632096 Apr 14 19:15 init</span><br><span class="line">lrwxrwxrwx  1 root root      7 Aug  9 23:56 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx  1 root root      9 Aug  9 23:56 lib32 -&gt; usr/lib32</span><br><span class="line">lrwxrwxrwx  1 root root      9 Aug  9 23:56 lib64 -&gt; usr/lib64</span><br><span class="line">lrwxrwxrwx  1 root root     10 Aug  9 23:56 libx32 -&gt; usr/libx32</span><br><span class="line">drwxr-xr-x  1 root root    512 Aug  9 23:56 media</span><br><span class="line">drwxr-xr-x  1 root root    512 Sep 24 22:39 mnt</span><br><span class="line">drwxr-xr-x  1 root root    512 Aug  9 23:56 opt</span><br><span class="line">dr-xr-xr-x 11 root root      0 Sep 25 10:57 proc</span><br><span class="line">drwx------  1 root root    512 Aug  9 23:57 root</span><br><span class="line">drwxr-xr-x  1 root root    512 Sep 25 10:57 run</span><br><span class="line">lrwxrwxrwx  1 root root      8 Aug  9 23:56 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x  1 root root    512 Aug  9 23:57 snap</span><br><span class="line">drwxr-xr-x  1 root root    512 Aug  9 23:56 srv</span><br><span class="line">dr-xr-xr-x 12 root root      0 Sep 25 10:57 sys</span><br><span class="line">drwxrwxrwt  1 root root    512 Aug  9 23:57 tmp</span><br><span class="line">drwxr-xr-x  1 root root    512 Aug  9 23:56 usr</span><br><span class="line">drwxr-xr-x  1 root root    512 Aug  9 23:57 var</span><br></pre></td></tr></table></figure><p>Here’s what it would have looked like if we didn’t use the <code>-al</code> flags:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:/$ <span class="built_in">ls</span></span><br><span class="line">bin   dev  home  lib    lib64   media  opt   root  sbin  srv  tmp  var</span><br><span class="line">boot  etc  init  lib32  libx32  mnt    proc  run   snap  sys  usr</span><br></pre></td></tr></table></figure><p>Don’t worry about the <code>drwxrwxr-x</code> gibberish; we’ll go through that very soon!</p><hr><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p><code>cat</code> is a command that allows you to view the contents of a file through the terminal. In this example, <code>hello.txt</code> will contain the string “Hello”:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ <span class="built_in">cat</span> hello.txt</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><hr><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p><code>touch</code> allows you to create files within the current directory.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~/test$ <span class="built_in">touch</span> hello.txt</span><br><span class="line">user@host:~/test$ <span class="built_in">ls</span></span><br><span class="line">hello.txt</span><br></pre></td></tr></table></figure><hr><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p><code>cd</code> stands for “change directory”. This is the primary means of navigation through directories in the terminal.</p><p>Let’s say we have a directory called <code>test/</code> that contains a file called <code>hello.txt</code>. We can navigate to the <code>test/</code> directory by using <code>cd</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">user@host:~/test$ <span class="built_in">ls</span></span><br><span class="line">hello.txt</span><br></pre></td></tr></table></figure><p>There are three relative paths that you should know: <code>.</code>, <code>..</code> and the tilde (<code>~</code>).</p><p>You typically only use the <code>.</code> if you’re running an executable file, like Firefox or a script:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ ./executable</span><br></pre></td></tr></table></figure><p><code>..</code> is used to navigate to the parent directory:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~/test$ <span class="built_in">cd</span> ..</span><br><span class="line">user@host:~$ <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><code>..</code> can also be used to access items in your parent directory. Let’s say you wanted to enter a <code>test2/</code> folder in your parent directory. You wouldn’t be able to <code>cd test2</code> because it’s not in your current directory. Instead, you would use <code>cd ../test2</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~/test$ <span class="built_in">cd</span> ../test2</span><br><span class="line">user@host:~/test2$ █</span><br></pre></td></tr></table></figure><p>Let’s say you wanted to go into your parent’s parent’s folder - you would use <code>cd ../../</code>. If you were in <code>test/</code>, you would be moved into <code>~/</code>, your user directory. Then, you’d be moved even further back into <code>/home</code>, the parent of your user directory (<code>~/</code>):</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~/test$ <span class="built_in">cd</span> ../../</span><br><span class="line">user@host:/home$ █</span><br></pre></td></tr></table></figure><p>The last relative path is the tilde (<code>~</code>), which is used to navigate to your home directory, and can be used similarly to <code>..</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~/test$ <span class="built_in">cd</span> ~</span><br><span class="line">user@host:~$ <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">user@host:~$ <span class="built_in">cd</span> ~/test</span><br><span class="line">user@host:~/test$ █</span><br></pre></td></tr></table></figure><p>If you want to navigate to any directory in your system you can use the absolute path, which starts at your root directory (<code>/</code>). This requires you type out the complete path to your destination. For example, if you were currently in your root directory and wanted to access <code>test/</code> in your user directory (<code>~/</code>), you would run this:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:/$ <span class="built_in">cd</span> /home/user/test</span><br><span class="line">user@host:~/test$ █</span><br></pre></td></tr></table></figure><hr><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p><code>mkdir</code> (shorthand for “make directory”) allows you to create a directory folder. To avoid issues, don’t create a directory beginning with <code>/</code>, or one that includes spaces. Stick to alphanumeric characters and dashes&#x2F;underscores!</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ <span class="built_in">mkdir</span> <span class="built_in">test</span></span><br><span class="line">user@host:~$ <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">user@host:~/test$ █</span><br></pre></td></tr></table></figure><hr><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p><code>rm</code> (shorthand for “remove”) permanently deletes files from your computer. It doesn’t move them to the recycling bin, it just obliterates them. <code>rmdir</code> functions exactly the same, except with directories.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ <span class="built_in">rm</span> [FILE]</span><br><span class="line">user@host:~$ <span class="built_in">rmdir</span> [DIRECTORY]</span><br></pre></td></tr></table></figure><hr><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p><code>mv</code> (shorthand for “move”) serves two distinct purposes.  </p><p>Moving files:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ <span class="built_in">mkdir</span> test1 test2</span><br><span class="line">user@host:~$ <span class="built_in">ls</span></span><br><span class="line">test1   test2</span><br><span class="line">user@host:~$ <span class="built_in">mv</span> test1 test2</span><br><span class="line">user@host:~$ <span class="built_in">cd</span> test2</span><br><span class="line">user@host:~/test2$ <span class="built_in">ls</span></span><br><span class="line">test1</span><br></pre></td></tr></table></figure><p>Renaming files:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ <span class="built_in">ls</span></span><br><span class="line">file1.txt</span><br><span class="line">user@host:~$ <span class="built_in">mv</span> file1.txt file2.txt</span><br><span class="line">user@host:~$ <span class="built_in">ls</span></span><br><span class="line">file2.txt</span><br></pre></td></tr></table></figure><hr><h3 id="Challenge-I"><a href="#Challenge-I" class="headerlink" title="Challenge I"></a>Challenge I</h3><ul><li><p>Through the command line, create a file named <code>hello.txt</code> in the <code>Desktop/</code> folder. Add “hello!” to the file as text and read the file afterwards.</p></li><li><p>After this, add additional text that says “how are you doing?” to it, without removing the original “hello”. Read the file again.</p></li><li><p>BONUS: Make a directory called <code>test/</code> and move your file into it.</p></li></ul><hr><h3 id="Permission-Based-Commands"><a href="#Permission-Based-Commands" class="headerlink" title="Permission-Based Commands"></a>Permission-Based Commands</h3><p>These commands allow you to change the permissions of files and directories, or escalate to administrative privileges.</p><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p><code>sudo</code> (shorthand for “superuser do”) allows you to run commands as the root user. This is useful for installing software, changing system settings, and other administrative tasks. You will be prompted to enter your password before the command is executed.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ sudo [COMMAND]</span><br></pre></td></tr></table></figure><p><code>sudo su</code> allows you to switch to the root user. This is useful if you want to run a command as the root user without having to type <code>sudo</code> before every command. You will be prompted to enter your password before the command is executed.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ sudo su</span><br><span class="line">root@host:~<span class="comment"># █</span></span><br></pre></td></tr></table></figure><p>IMPORTANT: Be careful when using <code>sudo su</code>! If you make a mistake, you could accidentally delete important files or change system settings. It’s best to use <code>sudo</code> before every command.</p><hr><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><p><code>chown</code> (shorthand for “change owner”) allows you to change the owner of a file or directory.</p><p>Let’s say I had a folder called <code>test/</code> that’s currently owned by the user <code>user</code>. I want to change the owner to <code>root</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ <span class="built_in">ls</span> -al</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x 2 user user 512 Jan  1 00:00 <span class="built_in">test</span></span><br><span class="line">user@host:~$ sudo <span class="built_in">chown</span> root <span class="built_in">test</span></span><br><span class="line">user@host:~$ <span class="built_in">ls</span> -al</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x 2 root user 512 Jan  1 00:00 <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>As you can see, root now owns the <code>test/</code> directory.</p><hr><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p><code>chmod</code> (shorthand for “change mode”) changes the file permissions on a file or folder.</p><p>Permissions for a user are defined by a <strong>permission flag</strong>. This flag shows who can read, write and&#x2F;or execute the code. When you list files using <code>ls -al</code> you get outputs like these:</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">-rwxrw-r--</span><br></pre></td></tr></table></figure><p>Let’s analyze this:</p><ul><li><code>-</code>: Indicates this entry is a file. If this character is <code>d</code>, the entry is a directory.</li><li><code>rwx</code>: The first group of three characters belong to the superuser. This means that the superuser (root) can read (<code>r</code>), write (<code>w</code>) and execute (<code>x</code>) this file.</li><li><code>rw-</code>: The second group of three characters belongs to your user’s group. This means that everyone in your group can read and write this file, but cannot execute it, as indicated with the <code>-</code>.</li><li><code>r--</code>: The final group of three characters belongs to the user itself. You can only read this file, but cannot write to it or execute it.</li></ul><p>Another example: a <code>-rwxrwxrwx</code> flag means that everyone on the system can read, write and execute the file.</p><p>Here is the syntax for <code>chmod</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> [FLAGS] [USERTYPE][-+=][PERMISSIONS] [FILE]</span><br></pre></td></tr></table></figure><p><code>[USERTYPE]</code> can be:</p><ul><li><code>u</code>: The file owner.</li><li><code>g</code>: Users within the group.</li><li><code>o</code>: All other users.</li><li><code>a</code>: All users, equivalent to <code>ugo</code>.</li><li>Empty, which defaults to <code>a</code>.</li></ul><p> <code>[-+=]</code> can be:</p><ul><li><code>-</code>: Removes <code>[PERMISSIONS]</code>.</li><li><code>+</code>: Adds <code>[PERMISSIONS]</code>.</li><li><code>=</code>: Replaces <code>[PERMISSIONS]</code>. If <code>[PERMISSIONS]</code> is empty after <code>=</code>, it will remove all permissions.</li></ul><p><code>[PERMISSIONS]</code> can be:</p><ul><li><code>r</code>: Read permission</li><li><code>w</code>: Write permission</li><li><code>x</code>: Execute permission</li></ul><p>Example usages:</p><ul><li><code>chmod g=r hello.txt</code>: Sets the group permissions to read-only.</li><li><code>chmod a+rx hello.txt</code>: Adds read and execute permissions to all users.</li><li><code>chmod -w hello.txt</code>: Removes write permissions from all users.</li><li><code>chmod u+rwx,g-x hello.txt</code>: Adds read, write and execute permissions to the user, and removes execute permissions from the group.</li></ul><hr><h3 id="Advanced-Terminal-Operators"><a href="#Advanced-Terminal-Operators" class="headerlink" title="Advanced Terminal Operators"></a>Advanced Terminal Operators</h3><p>Here are some symbols that you can use alongside your commands to make life easier.</p><h3 id="gt"><a href="#gt" class="headerlink" title="&gt;"></a>&gt;</h3><p><code>&gt;</code> redirects the output of a command to a file. For example, if you wanted to redirect the output of <code>ls</code> to a file called <code>output.txt</code>, you would run this:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ <span class="built_in">ls</span> &gt; output.txt</span><br></pre></td></tr></table></figure><hr><h3 id="amp-amp-and"><a href="#amp-amp-and" class="headerlink" title="&amp;&amp; and ||"></a>&amp;&amp; and ||</h3><p><code>&amp;&amp;</code> allows you to execute another command after the first is executed successfully.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ <span class="built_in">echo</span> <span class="string">&quot;Hello&quot;</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Hi&quot;</span></span><br><span class="line">Hello</span><br><span class="line">Hi</span><br></pre></td></tr></table></figure><p>You can use also use a separate <code>||</code> operator, which will execute the second command if the first one fails.</p><hr><h3 id=""><a href="#" class="headerlink" title="|"></a>|</h3><p><code>|</code> is referred to as a “pipe”. The pipe allows you to use the output of one command as input for another command.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ <span class="built_in">ls</span> -al | grep <span class="string">&quot;txt&quot;</span></span><br></pre></td></tr></table></figure><p>The command above lists the current directory, and then uses the output of that command for a command named <code>grep</code>. <code>grep</code> allows us to filter and reveal files with the string <code>&quot;txt&quot;</code> within their name.</p><hr><h3 id="Challenge-II"><a href="#Challenge-II" class="headerlink" title="Challenge II"></a>Challenge II</h3><ul><li>Find the permission flag of the file you made in Challenge 1. Then, make it so that all users can read, write and execute the file.</li></ul>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
          <category> linux-101 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 101.2: The Terminal</title>
      <link href="//blog/linux-101/02/"/>
      <url>//blog/linux-101/02/</url>
      
        <content type="html"><![CDATA[<p>Always remember: Although the terminal of a completely foreign operating system may sound really intimidating at first, there are only a couple commands that you need to fully memorize!</p><h3 id="Getting-a-Shell"><a href="#Getting-a-Shell" class="headerlink" title="Getting a Shell"></a>Getting a Shell</h3><p>To start, let’s get a shell running on your computer.</p><p>For Windows users, you can do this by installing “Windows Subsystem for Linux”. Start with <kbd>⊞ Win</kbd> -&gt; “<code>cmd</code>“, and right-click “Command Prompt” -&gt; “Run as administrator”. Paste the following command into the terminal:</p><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--install</span></span><br></pre></td></tr></table></figure><p>To learn more about installing Linux on Windows with WSL, read <a href="https://learn.microsoft.com/en-us/windows/wsl/install">this article</a>.</p><p>Once it’s finished installing, restart your computer.</p><p>Afterwards, download the <a href="https://apps.microsoft.com/store/detail/ubuntu/9PDXGNCFSCZV">Ubuntu</a> distribution from the Microsoft Store. Once installed, open it through <kbd>⊞ Win</kbd> -&gt; “Ubuntu”.</p><p>On your first open of Ubuntu, you will be prompted to create a username and password. This is the same as creating a new account on your computer. <strong>Note that your password won’t appear to be typed because it’s hidden, but don’t worry - it’s still being typed out</strong>. Once you’ve created your account, you will be taken to a shell prompt:</p><figure>    <img src="/asset/linux-101/ubuntu.png" alt="WSL Session">    <figcaption>WSL Session</figcaption></figure><p>(Optional) Once you’ve installed Ubuntu, download the <a href="https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701">Windows Terminal</a> app (which is also available in the Microsoft Store). This is a much more powerful terminal app that allows you to run multiple shells at once. To run it, open the Start menu and type “Terminal”. Then, hover over the dropdown menu next to the “New Tab” button and select “Ubuntu”:</p><figure>    <img src="/asset/linux-101/new-terminal.png" alt="Opening Ubuntu Session">    <figcaption>Opening Ubuntu Session</figcaption></figure><p>If you want to set Ubuntu as your default shell, you can press <kbd>Ctrl</kbd> + <kbd>,</kbd> to open the Settings tab. Scroll over to “Startup” and select “Ubuntu” from the dropdown menu for “Default profile”:</p><figure>    <img src="/asset/linux-101/default-profile.png" alt="Setting Ubuntu as Default Shell">    <figcaption>Setting Ubuntu as Default Shell</figcaption></figure><p>For Mac users, your default terminal is already a shell! Just open the Terminal app and you’re good to go.</p><p>You should be getting an odd textbox that looks like this:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ █</span><br></pre></td></tr></table></figure><p>All this gibberish is called a <strong>prompt</strong>. Let’s break this down:</p><ul><li><code>user</code>: Indicates the user you logged in with.</li><li><code>host</code>: The name of your Linux system (or computer on WSL).</li><li><code>~</code>: Indicates the <strong>home directory</strong>, which is the default <strong>present working directory</strong> of Linux distros (we’ll talk about this shortly). This will change depending on your PWD (ex. <code>/home</code>).</li><li><code>$</code>: Indicates user type. Regular users are indicated with a dollar sign (<code>$</code>), whilst an administrator&#x2F;superuser is indicated with a hash (<code>#</code>).</li></ul><p>Note: Not all distros have this format. Some are formatted like <code>[user@host ~]$</code> or <code>(user@host)-[~]$</code>, and some could just be a <code>user$</code>.</p><h3 id="Your-First-Command"><a href="#Your-First-Command" class="headerlink" title="Your First Command"></a>Your First Command</h3><p>Let’s run our first command:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ <span class="built_in">pwd</span></span><br><span class="line">/home/yourusername</span><br></pre></td></tr></table></figure><p>The <code>pwd</code> command stands for “present working directory”, and it’s basically asking the system: “where the hell am I?”. The <strong>directory</strong> is simply the path of files and folders. In this case, the system is telling us that we are in the <code>/home/yourusername</code> directory.</p><p>Let’s break down <code>/home/yourusername</code>:</p><ul><li><code>/</code>: This is the <strong>root directory</strong>. It’s the top-most directory of the file system, and where all of the important files are stored. It’s like the “root” of a tree (in Windows terms, it’s like <code>C:\</code>).</li><li><code>home</code>: This is the <strong>home directory</strong>. It’s where all user accounts are stored.</li><li><code>yourusername</code>: This is your <strong>user directory</strong>. It’s where all your personal files are stored, like the <code>Desktop/</code> and <code>Downloads/</code> folder.</li></ul><p>If a command has finished running, it will create a newline and the prompt will come back:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ <span class="built_in">pwd</span></span><br><span class="line">/home/yourusername</span><br><span class="line">user@host:~$ █</span><br></pre></td></tr></table></figure><p>This is perfectly normal. However, sometimes a command will do this:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ nc 10.0.0.1</span><br><span class="line">‎</span><br><span class="line">‎</span><br><span class="line">‎</span><br></pre></td></tr></table></figure><p>This state is called a “hung” or “frozen” terminal. To interrupt or exit the operation, press <kbd>Ctrl</kbd> + <kbd>C</kbd> or <kbd>Delete</kbd>.</p><p>Note that although your commands may run, they may not always return an output. For example, creating a file with <code>touch</code> executes perfectly fine, but doesn’t tell the user that it has succeeded; it will only return <strong>errors</strong>. </p><p>Always be careful when executing code. <strong>Never paste code you don’t understand into the terminal.</strong></p><h3 id="The-Anatomy-of-a-Command"><a href="#The-Anatomy-of-a-Command" class="headerlink" title="The Anatomy of a Command"></a>The Anatomy of a Command</h3><p>A single command will usually look like this:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span> [FLAGS] [ARGUMENTS]</span><br></pre></td></tr></table></figure><p>If you want to run a command with an argument, just add a space after the command name and type the argument. For example, to create a file called <code>test.txt</code>, you can run:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ <span class="built_in">touch</span> test.txt</span><br></pre></td></tr></table></figure><p>There are two types of commands:</p><ol><li><strong>Built-in commands</strong>: A name which is associated with a software pre-installed into your environment.</li><li><strong>External commands</strong>: The command is either a pre-defined name by the operating system, or a custom one installed by other software. When you want your terminal to run custom software like <code>nmap</code>, you could type <code>nmap</code> to run it, which wouldn’t be possible without it installed.</li></ol><h3 id="Flags"><a href="#Flags" class="headerlink" title="Flags"></a>Flags</h3><p><strong>Flags</strong> are additional user-inputted parameters which explain to the system how you want the program to run.</p><p>If you want to run a command with both an argument and a flag, just add a space after the command name and type the flag. For example, to create a file called <code>test.txt</code> and make it hidden, you can run:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@host:~$ <span class="built_in">touch</span> -h test.txt</span><br></pre></td></tr></table></figure><p>Be careful when typing flags, as there is a difference between a single dash and double dash! A single dash means the flag is <strong>single-character</strong>, while a double dash means the flag is <strong>multi-character</strong>. If you typed <code>-flag</code> instead of <code>--flag</code> the terminal would read it as <code>-f -l -a -g</code>, which probably isn’t good.</p><p>Note that single-letter flags are often shorthand for longer ones. For example, <code>ls -a</code> is the same thing as <code>ls --all</code>.</p><hr><h3 id="Check-up"><a href="#Check-up" class="headerlink" title="Check-up"></a>Check-up</h3><ol><li>Where are all your personal files located?</li><li>What is Linux’s root directory? What’s stored in there?</li><li>What is stored in the <code>/home</code> directory?</li><li>What is an argument?</li><li>What do flags do, and what is the difference between a single-dash and double-dash flag?</li><li>BONUS: What would happen if I tried to run the command  wireshark without the software “Wireshark” installed?</li></ol>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
          <category> linux-101 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 101.1: About Linux</title>
      <link href="//blog/linux-101/01/"/>
      <url>//blog/linux-101/01/</url>
      
        <content type="html"><![CDATA[<h3 id="What-is-Linux"><a href="#What-is-Linux" class="headerlink" title="What is Linux?"></a>What is Linux?</h3><p>Linux is a family of <strong>Unix-like operating systems</strong> (essentially derived off of the “OG” Unix).<br>Just for fun, here is a “family tree” of all the operating systems that have derived off of Unix:</p><p><img src="/asset/linux-101/tree.png" alt="Linux family tree"></p><p>Linux is considered a family of operating systems because there are so many different <strong>distros</strong> (distributions, sometimes called “flavors”) of Linux. Each flavor has its own purpose and specialties, and almost all of them are derived from previous distros. </p><p>Here are some examples of distributions:</p><ul><li><a href="https://www.debian.org/">Debian</a></li><li><a href="https://ubuntu.com/">Ubuntu</a></li><li><a href="https://archlinux.org/">Arch</a></li><li><a href="https://linuxmint.com/">Mint</a></li></ul><h3 id="The-Command-line-Interface-and-Shell"><a href="#The-Command-line-Interface-and-Shell" class="headerlink" title="The Command-line Interface and Shell"></a>The Command-line Interface and Shell</h3><figure>    <img src="/asset/linux-101/terminal.png" alt="Ubuntu in Windows">    <figcaption>Ubuntu in Windows</figcaption></figure><p>The terminal is a <strong>command-line interface</strong> (in contrast to a graphical user interface, or GUI) that takes the user input and runs it through a <strong>shell</strong>. A shell is a software which allows both human users and other programs to interact with OS services. It is essentially the most important software in a UNIX-style OS. In most Linux flavors the default shell is called <strong>bash</strong> (Bourne-Again Shell), which is by the most popular shell. </p><p>Think of a terminal as a line-by-line version of a file navigation&#x2F;explorer. Here is an example of a GUI:</p><figure>    <img src="/asset/linux-101/windows-explorer.png" alt="Windows Explorer">    <figcaption>Windows File Explorer</figcaption></figure><p>Meanwhile, here is an example of a terminal session:</p><figure>    <img src="/asset/linux-101/linux-ls.png" alt="Linux ls command">    <figcaption>Ubuntu Linux Session</figcaption></figure><p>As you can see, both the GUI and the terminal are used to navigate files and folders. While you can point and click with a GUI, the terminal is command-based.</p><p>Although the terminal seems initially difficult, with use it can become much more powerful than a GUI. For example, you can use the terminal to run programs, install software, and even automate processes. For example, if you wanted to make a folder in a GUI, you would have to right-click on the parent folder, click “New”, and then click “Folder”. In the terminal, you can just type <code>mkdir foldername</code> and press enter:</p><figure>    <img src="/asset/linux-101/mkdir.png" alt="Linux mkdir command">    <figcaption>Linux <code>mkdir</code> command</figcaption></figure><hr><h3 id="Check-Up"><a href="#Check-Up" class="headerlink" title="Check-Up"></a>Check-Up</h3><ol><li>Why is Linux considered a “family” of operating systems?</li><li>What are “flavors” of Linux? What do they all have in common?</li><li>What is a command-line interface, and what is the difference between a CLI and GUI?</li><li>What is a terminal?</li><li>What is a shell, and what are the differences between the terminal and shell?</li></ol>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
          <category> linux-101 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
